function [] = gui_sim_tdoa()
% ############################################################################################
% ##### gui version of simulate tdoa location
% ##### reference code: GUI_41.m (Author:  Matt Fig)
% ##### https://kr.mathworks.com/matlabcentral/fileexchange/24861-41-complete-gui-examples
% #####
% ##### this program is monolithic(very lengthy), study to make it modular 
% ############################################################################################
%

% radio_button_length = 8;
% figure_length = radio_button_length + 1;

% ####################################################################################
% ### S structure is needed in S.sensor_position?
% ###
% ### try this:
% ### sensor_position = [];
% ###
% ### see learn_nested_function.m
% ### https://kr.mathworks.com/help/matlab/matlab_prog/nested-functions.html
% ####################################################################################

% [S] = initialize_gui_shared_data;

S.sensor_position = [];
S.rician_param = [];
S.target_radius_meter = [];
S.uca_radius_meter = [];
S.fading_param_filename = [];
S.rician_param_raw = [];

% ## not fully tested for small monitor(161128)
root_screen_size = get(0, 'screensize');
% fig1 left = 200, fig1 width = 850, fig2 width = 350
if root_screen_size(3) > (200 + 850 + 350)
    % for large monitor
    S.second_fig_pos_left = 1070;
else
    % for small monitor 
    S.second_fig_pos_left = 520;
end

% S.str_ndlrb = {'6';'15';'25'};  % String for popups.
S.ndlrb = [];

% #############################################################################
% ### temporary: must rewrite,
% ### nprsrb is dependant on ndlrb, nprsrb = 1 : current value of ndlrb
% #############################################################################
% S.str_nprsrb = {'1';'2';'3';'4';'5';'6'};  % String for popups.
S.nprsrb = [];

% S.str_subframe_length = {'1';'2'};  % String for popups.
S.subframe_length = [];

S.tx_signal = [];
S.fs = [];
S.nfft = [];
S.bw_mhz = [];
S.sample_length = [];

S.fh(1) = figure('units','pixels',...
    'position',[200 650 850 250],...
    'menubar','none',...
    'name','simulation of tdoa location',...
    'numbertitle','off',...
    'resize','off',...
    'closerequestfcn',{@fh_main_crfcn});
S.txmain = uicontrol('units','pixels',...
    'style','text',...
    'unit','pix',...
    'position',[200 190 450 25],...
    'string','Radio Emitter Location using TDOA Sensors',...
    'fontweight','bold',...
    'backgroundcolor',get(S.fh(1),'color'), ...
    'fontsize',15, ...
    'foregroundcolor', 'b');
S.bg = uibuttongroup('units','pix',...
    'pos',[20 70 810 90]);
S.rd(1) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[20 50 130 30],...
    'tooltipstring', sprintf('simulate tdoa location when sensor fixed'), ...
    'fontweight','bold',...
    'string','sensor fixed');
S.SEL = 1;  % The selected object property of S.bg
S.SEL_old = 1;
S.rd(2) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[20 10 130 30],...
    'tooltipstring', 'simulate tdoa location when target fixed at [0,0]', ...
    'fontweight','bold',...
    'string','target fixed');
S.rd(3) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[220 50 130 30],...
    'tooltipstring', ...
    sprintf('how location error is varied with\ntarget position and sensor length/shape?'), ...
    'fontweight','bold',...
    'string','batch sensor fixed');
S.rd(4) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[220 10 130 30],...
    'tooltipstring', ...
    sprintf('how location error is varied with\nsensor length, location method, snr?'), ...
    'fontweight','bold',...
    'string','batch target fixed');
S.rd(5) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[420 50 130 30],...
    'tooltipstring', ...
    sprintf('how location error is varied with\ntarget signal bandwidth, correlation length, snr?'), ...
    'fontweight','bold',...
    'string','batch bw corr snr');
S.rd(6) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[420 10 130 30],...
    'tooltipstring','plot result of batch_simulate_tdoa_target_fixed.m', ...
    'fontweight','bold',...
    'string','plot target fixed');
S.rd(7) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[620 50 130 30],...
    'tooltipstring','plot result of batch_simulate_tdoa_sensor_fixed.m', ...
    'fontweight','bold',...
    'string','plot sensor fixed');
S.rd(8) = uicontrol(S.bg,...
    'style','rad',...
    'unit','pix',...
    'position',[620 10 130 30],...
    'tooltipstring','plot result of batch_simulate_tdoa_bw_corr_snr.m', ...
    'fontweight','bold',...
    'string','plot bw corr snr');
S.pb(1) = uicontrol('style','push',...
    'unit','pix',...
    'position',[355 20 150 30],...
    'fontweight','bold',...
    'string','input parameters',...
    'callback',{@pb_input_param_call});
S.fm(1) = uimenu(S.fh(1),...
    'label','sensor position',...
    'enable','on');
S.fm(2) = uimenu(S.fm(1),...
    'label','load',...
    'callback',{@fm_load_sensor_position_call},...
    'enable','on');
S.fm(3) = uimenu(S.fm(1),...
    'label','show',...
    'callback',{@fm_show_sensor_position_call},...
    'enable','on');
S.fm(4) = uimenu(S.fh(1),...
    'label','fading parameter',...
    'enable','on');
S.fm(5) = uimenu(S.fm(4),...
    'label','load',...
    'callback',{@fm_load_fading_parameter_call},...
    'enable','on');
S.fm(6) = uimenu(S.fm(4),...
    'label','clear',...
    'callback',{@fm_clear_fading_parameter_call},...
    'enable','on');
S.fm(7) = uimenu(S.fm(4),...
    'label','show',...
    'callback',{@fm_show_fading_parameter_call},...
    'enable','on');
S.fm(8) = uimenu(S.fh(1),...
    'label','target signal',...
    'enable','on');
S.fm(9) = uimenu(S.fm(8),...
    'label','LTE PRS',...
    'callback',{@fm_generate_lte_prs_signal_call},...
    'enable','on');
S.fm(10) = uimenu(S.fm(8),...
    'label','422MHz(BW 8.5kHz)',...
    'callback',{@fm_generate_422mhz_signal_call},...
    'enable','on');
S.fm(11) = uimenu(S.fh(1),...
    'label','about',...
    'callback',{@fm_about_call},...
    'enable','on');

% guidata(S.fh(1), S);

    function [] = fm_about_call(varargin)
        
        uiwait(my_msgbox('contact: hykang@etri.re.kr',...
            'Carpe Diem','help','modal',8,'b'));
%         uiwait(msgbox({'contact: hykang@etri.re.kr'},...
%             'Carpe Diem','modal'));
        
    end

    function [] = fm_load_sensor_position_call(varargin)
        
        % ######## DONT USE below line, DONT USE S structure as input of fm_load_sensor_position_call:
        % ######## this callback function can destroy uicontrol in "input for sensor fixed" figure
        % ######## because all field of S structure is empty(line 1 ~ 61)
%         S = varargin{3};  % Get the structure.
        
        filterspec = 'sensor_position_*.txt';
        S.sensor_position_filename = uigetfile(filterspec,'select sensor position file');
        if S.sensor_position_filename == 0
            disp('Unable to Load. Check Name and Try Again.');
            return;
        end
        
        [S.sensor_position, S.uca_radius_meter] = ...
            get_sensor_position_from_file(S.sensor_position_filename);
        
%         try
%             [S.sensor_position, S.uca_radius_meter] = ...
%                 get_sensor_position_from_file(S.sensor_position_filename);
%         catch
%             disp('Unable to Load. Check Name and Try Again.')
%         end
        
    end

    function [] = fm_show_sensor_position_call(varargin)

        title_text = 'sensor position';
        % ####### radius_ratio: temporary #######
        % ####### radius_ratio determine in pb_sensor_fixed_call, so here it have no value
        radius_ratio = 1.5;
        S.target_radius_meter = S.uca_radius_meter * radius_ratio;
        plot_sensor_position_only(S.sensor_position, S.target_radius_meter, title_text, ...
            S.fading_param_filename);
        
    end

    function [] = fm_load_fading_parameter_call(varargin)
        
        % ###### uigetfile move to "try" section is better?
        S.fading_param_filename = uigetfile('*.xlsx','select fading parameter file');
        if S.fading_param_filename == 0
            disp('Unable to Load. Check Name and Try Again.');
            return;
        end
        
        try
            prompt = {'Enter Excel Range:'};
            dlg_title = 'Input';
            num_lines = 1;
            def = {'b3:d7'};
            xlsrange = inputdlg(prompt,dlg_title,num_lines,def); % inputdlg output is 'cell'
            xlsrange = cell2mat(xlsrange); % xlsrange input of xlsread MUST BE 'char', not 'cell'
            [S.rician_param, S.rician_param_raw] = ...
                get_rician_parameter_from_excel_file(S.fading_param_filename, xlsrange);
            S.rician_param;
%             if size(S.rician_param, 1) ~= size(S.sensor_position, 1)
%                 error('##### row length of rician parameter must be same as sensor length\n');
%             end
        catch
            disp('Unable to Load. Check Name and Try Again.');
            return;
        end
        
        if size(S.rician_param, 1) ~= size(S.sensor_position, 1)
            errordlg('##### row length of rician parameter must be same as sensor length', ...
                'sensor length error', 'modal');
            return;
        end
        
    end

    function [] = fm_clear_fading_parameter_call(varargin)
        
        S.rician_param = [];
        
        uiwait(msgbox({'fading parameter was cleared'},...
            'info','modal'));
        
    end

    function [] = fm_show_fading_parameter_call(varargin)
        
        if isempty(S.rician_param)
            uiwait(msgbox({'fading parameter is empty'},...
                'info','modal'));
            return;
        end
        
        sensor_length = size(S.rician_param_raw, 1);
        rnames = cell(1, sensor_length);
        for n = 1 : sensor_length
            rnames{n} = sprintf('sensor%d', n);
        end
        
        f = figure('Position',[200 200 450 200], ...
            'menubar','none',...
            'name','fading parameters',...
            'numbertitle','off',...
            'resize','off');
        dat = S.rician_param_raw;
        cnames = {'K factor','path delay(delta ratio)','path loss(dB)'};
        t = uitable('Parent',f,'Data',dat,'ColumnName',cnames,...
            'RowName',rnames,'Position',[20 20 370 170]);
        
    end

    function [] = fm_generate_lte_prs_signal_call(varargin)
        
        try
            ndlrb_vec = [6,15,25];
            prompt = {'enter NDLRB(one of 6,15,25):','enter NPRSRB(1 ~ NDLRB):','enter subframe length(1 or 2)'};
            dlg_title = 'Input';
            num_lines = 1;
            def = {'15','2','1'};
            answer = inputdlg(prompt,dlg_title,num_lines,def);
            S.ndlrb = str2num(answer{1});
            S.nprsrb = str2num(answer{2});
            S.subframe_length = str2num(answer{3});
            
            find(ndlrb_vec == S.ndlrb);
            % ##### below line is NOT needed
            % ##### empty output from "find" command means error
            %     assert(~isempty(idx));
            assert(~(S.nprsrb > S.ndlrb));
            
            %             [S.bw_mhz, S.fs, S.nfft, S.sample_length] = get_bw_from_prs_spec_db(S.ndlrb, S.nprsrb, S.subframe_length);
            %
            %             [S.tx_signal, S.fs, S.nfft] = generate_target_signal_lte_prs(S.ndlrb, S.nprsrb, S.subframe_length);
        catch
            uiwait(msgbox({'wrong NDLRB or NPRSRB'},'info','modal'));
%             disp('wrong NDLRB or NPRSRB.');
            return;
        end
        
        [S.bw_mhz, S.fs, S.nfft, S.sample_length] = get_bw_from_prs_spec_db(S.ndlrb, S.nprsrb, S.subframe_length);
        
        [S.tx_signal, S.fs, S.nfft] = generate_target_signal_lte_prs(S.ndlrb, S.nprsrb, S.subframe_length);
        
    end

    function [] = fm_generate_422mhz_signal_call(varargin)
        
        % #################### consider to use learn_assert.m ###################
        
        try
            prompt = {'enter sample rate(Hz):','enter integer length:'};
            dlg_title = 'Input';
            num_lines = 1;
            def = {'0.25e6','480'}; % for default, see learn_fsk_422mhz.m
            answer = inputdlg(prompt,dlg_title,num_lines,def);
            S.fs = str2num(answer{1});
            integer_length = str2num(answer{2});
            
            [S.tx_signal, S.bw_mhz, S.nfft] = generate_target_signal_fsk_422mhz(S.fs, integer_length);
        catch
            disp('Unable to Load. Check Name and Try Again.');
        end
        
    end

    function [] = pb_input_param_call(varargin)

        % ###### function FAILED!!!!!!!
%         sub_pb_input_param_call(S);
        
        % Callback for the pushbutton.
        sel = findobj(get(S.bg,'selectedobject'));  % See BUG note in GUI_8
        S.fh;
        S.SEL_old;
        S.SEL = find(S.rd == sel);  % Store current radiobutton.
        if (length(S.fh) == 2) && (S.SEL ~= S.SEL_old)
            delete(S.fh(2));
            S.fh(2) = [];
        end
        S.SEL_old = S.SEL;
        S.SEL;
        
        switch sel
            
            % ##########################
            % ##### sensor fixed
            % ##########################
            case S.rd(1)
                %                 fprintf('fig length = %d\n', length(S.fh));
                if length(S.fh) == 1  % We haven't been here before.
                    
                    % ####### failed to make this code function
                    % ####### error message: can't find callback function
                    % ####### why?! rewrite code
                    %                     gui_populate_sensor_fixed_uicontrol(S);
                    
                    S.fh(2) = figure('units','pixels',...
                        'position',[S.second_fig_pos_left 500 350 430],... % [1070 500 350 430]
                        'name','input for sensor fixed',...
                        'menubar','none',...
                        'numbertitle','off',...
                        'resize','off',...
                        'closerequestfcn',{@fh_sub_crfcn});
                    
                    S.tx(1) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[70 385 210 25],...
                        'string','input for sensor fixed',...
                        'fontweight','bold',...
                        'fontsize',10, ...
                        'foregroundcolor', 'b', ...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(1) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[170 210 150 25]);
                    S.tx(2) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 205 110 25],...
                        'string','trial length',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(2) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '1.5', ...
                        'position',[170 245 150 25]);
                    S.tx(3) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 240 110 25],...
                        'string','radius ratio',...
                        'tooltipstring', 'distance ratio between target and farthest sensor from [0,0]', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(3) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[170 280 150 25]);
                    S.tx(4) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 275 110 25],...
                        'string','y of target position',...
                        'tooltipstring', 'unit = meter', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(4) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[170 315 150 25]);
                    S.tx(5) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 310 110 25],...
                        'string','x of target position',...
                        'tooltipstring', 'unit = meter', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(5) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '5', ...
                        'position',[170 350 150 25]);
                    S.tx(6) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 345 110 25],...
                        'string','SNR in dB',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                                        
                    S.pb(2) = uicontrol('style','push',...
                        'unit','pix',...
                        'position',[100 20 150 30],...
                        'fontweight','bold',...
                        'string','run sensor fixed',...
                        'callback',{@pb_run_sensor_fixed_call});
                    
                end
                
            % ##########################
            % ##### target fixed
            % ##########################
            case S.rd(2)
                
                if length(S.fh) == 1  % We haven't been here before.
                    
                    S.fh(2) = figure('units','pixels',...
                        'position',[S.second_fig_pos_left 298 417 552],... % [520 298 417 552]
                        'name','input for target fixed',...
                        'menubar','none',...
                        'numbertitle','off',...
                        'resize','off',...
                        'closerequestfcn',{@fh_sub_crfcn});
                    
                    S.tx(1) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[150 502 150 15],...
                        'string','input for target fixed',...
                        'fontweight','bold',...
                        'fontsize',10, ...
                        'foregroundcolor', 'b', ...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.lb(1) = uicontrol('units','pixels',...
                        'style','listbox',...
                        'unit','pix',...
                        'string', {'3', '4', '5', '6', '7'}, ...
                        'value', 3, ... % default: index = 3, sensor length = 5
                        'position',[176 377 169 75]);
                    S.tx(2) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[69 410 91 15],...
                        'string','sensor length',...
                        'HorizontalAlignment', 'left', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(1) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '5', ...
                        'position',[176 329 52 23]);
                    S.tx(3) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[68 333 77 15],...
                        'string','SNR in dB',...
                        'HorizontalAlignment', 'left', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.cb(1) = uicontrol('units','pixels',...
                        'style','checkbox',...
                        'unit','pix',...
                        'string', 'sensor 1 is always nearest to target', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'), ...
                        'value', 0, ...
                        'position',[50 279 244 23]);
                    S.cb(2) = uicontrol('units','pixels',...
                        'style','checkbox',...
                        'unit','pix',...
                        'string', 'use only least square estimator', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'), ...
                        'value', 0, ...
                        'position',[50 229 217 23]);
                    S.cb(3) = uicontrol('units','pixels',...
                        'style','checkbox',...
                        'unit','pix',...
                        'string', 'plot sensor position & hyperbola curve', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'), ...
                        'value', 1, ...
                        'position',[50 179 257 23]);
                    S.cb(4) = uicontrol('units','pixels',...
                        'style','checkbox',...
                        'unit','pix',...
                        'string', 'plot target signal & correlation', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'), ...
                        'value', 0, ...
                        'position',[50 129 208 23]);
                                        
                    S.pb(2) = uicontrol('style','push',...
                        'unit','pix',...
                        'position',[137 39 114 23],...
                        'fontweight','bold',...
                        'string','run target fixed',...
                        'callback',{@pb_run_target_fixed_call});
                    
                end
                
            % ##########################
            % ##### batch sensor fixed
            % ##########################
            case S.rd(3)
                if length(S.fh) == 1  % We haven't been here before.
                    S.fh(2) = figure('units','pixels',...
                        'position',[S.second_fig_pos_left 500 350 430],... % [1070 500 350 430]
                        'name','input for batch sensor fixed',...
                        'menubar','none',...
                        'numbertitle','off',...
                        'resize','off',...
                        'closerequestfcn',{@fh_sub_crfcn});
                    
                    S.tx(1) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[70 385 210 25],...
                        'string','input for batch sensor fixed',...
                        'fontweight','bold',...
                        'fontsize',10, ...
                        'foregroundcolor', 'b', ...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(1) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[170 210 150 25]);
                    S.tx(2) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 205 110 25],...
                        'string','trial length',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(2) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '1.5', ...
                        'position',[170 245 150 25]);
                    S.tx(3) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 240 110 25],...
                        'string','radius ratio',...
                        'tooltipstring', 'ratio between target distance and farthest sensor distance from [0,0]', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(4) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[170 315 150 25]);
                    S.tx(5) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 310 110 25],...
                        'string','target position step',...
                        'tooltipstring', 'same step is applied to x and y, unit = meter', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(5) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '5', ...
                        'position',[170 350 150 25]);
                    S.tx(6) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[30 345 110 25],...
                        'string','SNR in dB',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                                       
                    S.pb(2) = uicontrol('style','push',...
                        'unit','pix',...
                        'position',[100 20 150 30],...
                        'fontweight','bold',...
                        'string','run batch sensor fixed',...
                        'callback',{@pb_run_batch_sensor_fixed_call});
                    
                end
            
            % ##########################
            % ### batch target fixed
            % ##########################    
            case S.rd(4)  
                
                if length(S.fh) == 1  % We haven't been here before.
                    
                    S.fh(2) = figure('units','pixels',...
                        'position',[S.second_fig_pos_left 298 417 552],... % [520 298 417 552]
                        'name','input for target fixed',...
                        'menubar','none',...
                        'numbertitle','off',...
                        'resize','off',...
                        'closerequestfcn',{@fh_sub_crfcn});
                    
                    S.tx(1) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[90 501 185 19],...
                        'string','input for batch target fixed',...
                        'fontweight','bold',...
                        'fontsize',10, ...
                        'foregroundcolor', 'b', ...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(1) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '3:7', ...
                        'position',[177   405    72    23]);
                    S.tx(2) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[32 410 128 15],...
                        'string','sensor length (vector)',...
                        'HorizontalAlignment', 'left', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(2) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '-10:5:15', ...
                        'position',[176 329 72 23]);
                    S.tx(3) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[32 333 112 15],...
                        'string','SNR in dB (vector)',...
                        'HorizontalAlignment', 'left', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(3) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[176   254    72    23]);
                    S.tx(4) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[32   258   111    15],...
                        'string','trial length',...
                        'HorizontalAlignment', 'left', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.pb(2) = uicontrol('style','push',...
                        'unit','pix',...
                        'position',[115 39 175 23],...
                        'fontweight','bold',...
                        'string','run batch target fixed',...
                        'callback',{@pb_run_batch_target_fixed_call});
                    
                end
                
            % ##########################
            % ### batch bw corr snr
            % ##########################    
            case S.rd(5)
                
                if length(S.fh) == 1  % We haven't been here before.
                    
                    S.fh(2) = figure('units','pixels',...
                        'position',[S.second_fig_pos_left   290   361   510],... % [520   290   361   510]
                        'name','input for batch bw corr snr',...
                        'menubar','none',...
                        'numbertitle','off',...
                        'resize','off',...
                        'closerequestfcn',{@fh_sub_crfcn});
                    
                    S.tx(1) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[100   477   151    15],...
                        'string','input for batch bw corr snr',...
                        'fontweight','bold',...
                        'fontsize',10, ...
                        'foregroundcolor', 'b', ...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(1) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100, 100', ...
                        'position',[200   437   101    23]);
                    S.tx(2) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50   441   120    15],...
                        'string','target position (x, y)',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(2) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '1.5', ...
                        'position',[200   387   101    23]);
                    S.tx(3) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50   391   101    15],...
                        'string','radius ratio',...
                        'tooltipstring', 'distance ratio between target and farthest sensor from [0,0]', ...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(3) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '100', ...
                        'position',[200   337   101    23]);
                    S.tx(4) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50   341   101    15],...
                        'string','trial length',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.lb(1) = uicontrol('units','pixels',...
                        'style','listbox',...
                        'unit','pix',...
                        'string', {'6', '15', '25'}, ...
                        'value', 2, ...
                        'position',[200   242   101    68]);
                    S.tx(5) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50   273   101    15],...
                        'string','NDLRB',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(4) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '-5, 0, 5', ...
                        'position',[200   187   101    23]);
                    S.tx(6) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50   191   101    15],...
                        'string','SNR in dB (vector)',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(5) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '1:15', ...
                        'position',[200   137   101    23]);
                    S.tx(7) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50   141   101    15],...
                        'string','NPRSRB (vector)',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.ed(6) = uicontrol('units','pixels',...
                        'style','edit',...
                        'unit','pix',...
                        'string', '1, 2', ...
                        'position',[200    87   101    23]);
                    S.tx(8) = uicontrol('units','pixels',...
                        'style','text',...
                        'unit','pix',...
                        'position',[50    91   101    15],...
                        'string','nsubframe (vector)',...
                        'fontweight','bold',...
                        'backgroundcolor',get(S.fh(2),'color'));
                    
                    S.pb(2) = uicontrol('style','push',...
                        'unit','pix',...
                        'position',[100    37   151    23],...
                        'fontweight','bold',...
                        'string','run batch bw corr snr',...
                        'callback',{@pb_run_batch_bw_corr_snr_call});
                    
                end

            % ##########################
            % ### plot target fixed
            % ##########################
            case S.rd(6)
                
                filterspec = 'tdoa_result_target_fixed_*.mat';
                [filename, pathname, filterindex] = uigetfile(filterspec);
                if ~filename
                    fprintf(2, '######## file selection canceled\n');
                    return;
                else
                    fprintf('filename = %s\n', filename);
                end
                
                try
                    V = load(filename, 'sensor_length');
                    prompt = {sprintf('sensor length for errorbar plot (one of %s):', num2str(V.sensor_length))};
                    dlg_title = 'Input';
                    num_lines = [1];
                    def = {'5'};
                    answer = inputdlg(prompt,dlg_title,num_lines,def);
                    sensor_number_torrieri = str2num(answer{1});
                catch
                    disp('Unable to Load. Check Name and Try Again.');
                end
                
                sub_plot_tdoa_result_target_fixed(filename, sensor_number_torrieri);
                
            % ##########################
            % ### plot sensor fixed
            % ##########################
            case S.rd(7)
                
                filterspec = 'tdoa_result_sensor_fixed_*.mat';
                [filename, pathname, filterindex] = uigetfile(filterspec);
                if ~filename
                    fprintf(2, '######## file selection canceled\n');
                    return;
                else
                    fprintf('filename = %s\n', filename);
                end
                
                sub_plot_tdoa_result_sensor_fixed(filename);

            % ##########################
            % ### plot bw corr snr
            % ##########################    
            case S.rd(8)  

                filterspec = 'tdoa_result_bw_corr_snr_*.mat';
                [filename, pathname, filterindex] = uigetfile(filterspec);
                if ~filename
                    fprintf(2, '######## file selection canceled\n');
                    return;
                end
                
                try
                    % ### reminder ###
                    % ### in batch_simulate_tdoa_bw_corr_snr.m
                    % save(filename, 'sensor_position', 'target_position', 'trial_length', 'rician_param', ...
                    %     'ndlrb', 'snr_vec', 'nprsrb_vec', 'nsubframe_vec', 'position_error_array', 'target_position_limit', ...
                    %     'error_cell_array', 'radius_ratio');
                    
                    % old result mat file may not have 'rician_param' variable
                    V = load(filename, 'rician_param', 'snr_vec', 'nsubframe_vec');
                    if ~isempty(V.rician_param)
                        prompt = {sprintf('index for SNR = [%s] dB:', num2str(V.snr_vec)), ...
                            sprintf('index for nsubframe = [%s]:', num2str(V.nsubframe_vec))};
                        dlg_title = 'Input';
                        num_lines = 1;
                        def = {'1', '1'};
                        answer = inputdlg(prompt,dlg_title,num_lines,def);
                        snr_idx = str2num(answer{1});
                        nsubframe_idx = str2num(answer{2});
                    else
                        % ### below 2 line is dummy for function input in case of non-fading environment
                        snr_idx = 1;
                        nsubframe_idx = 1;
                    end
                    
                    sub_plot_tdoa_result_bw_corr_snr(filename, snr_idx, nsubframe_idx);
                    
                catch
                    disp('Unable to Load. Check Name and Try Again.');
                end
                
            otherwise
                % Very unlikely I think.
        end
        
        function [] = pb_run_batch_bw_corr_snr_call(varargin)
            
            if isempty(S.sensor_position)
                uiwait(msgbox({'empty sensor position: load sensor postion'},...
                    'warning','modal'));
                return;
            end
            
            target_position = str2num(char(get(S.ed(1),'String')));
            radius_ratio = str2num(get(S.ed(2),'String'));
            trial_length = str2num(get(S.ed(3),'String'));
            snr_vec = str2num(char(get(S.ed(4),'String')));
            nprsrb_vec = str2num(char(get(S.ed(5),'String')));
            nsubframe_vec = str2num(char(get(S.ed(6),'String')));
            
            lb_sel = get(S.lb(1), {'String', 'value'}); % get sensor length from listbox
            % #### tricky!! see comment out part(line 19) in gui_sensor_fixed_input_from_uicontrol.m
            ndlrb = str2num(lb_sel{1}{lb_sel{2}});
            
            if nprsrb_vec(end) > ndlrb
                uiwait(msgbox({'NPRSRB(end) MUST NOT be greater than NDLRB'},...
                    'warning','modal'));
                return;
%                 fprintf(2, '##### nprsrb MUST NOT be greater than ndlrb\n');
%                 return;
            end
            
            [filename] = sub_batch_simulate_tdoa_bw_corr_snr(S.sensor_position, S.uca_radius_meter, ...
                target_position, radius_ratio, trial_length, S.rician_param, ...
                ndlrb, snr_vec, nprsrb_vec, nsubframe_vec);
            
            msgbox_str = sprintf('%s was created', filename);
            uiwait(msgbox({msgbox_str},'info','modal'));
            
        end
        
        function [] = pb_run_batch_target_fixed_call(varargin)
            
            % ####################################################################
            % #### MUST USE S.ed(1)
            % #### DONT USE S.ed because S.ed is edit array!!
            % ####################################################################
            
            % #### str2num input MUST BE 'char array', NOT cell
            % #### so char function is used to convert 'cell' to 'char array'
            sensor_length = str2num(char(get(S.ed(1),'String')));
            snr_db = str2num(char(get(S.ed(2),'String')));
            trial_length = str2num(get(S.ed(3),'String'));
            
            filename = batch_simulate_tdoa_target_fixed(sensor_length, snr_db, trial_length);
            
            msgbox_str = sprintf('%s was created', filename);
            uiwait(msgbox({msgbox_str},'info','modal'));
            
        end
        
        function [] = pb_run_target_fixed_call(varargin)
            
            [sensor_length, snr_db, randomize_sensor_distance, ...
                use_only_torrieri_method, plot_position, plot_signal] = ...
                gui_target_fixed_input_from_uicontrol(S);
            
            [position_error_hyperbolic, position_error_linear, position_error_torrieri] = ...
                simulate_tdoa_target_fixed(sensor_length, snr_db, randomize_sensor_distance, ...
                use_only_torrieri_method, plot_position, plot_signal);
            
        end
        
        function [] = pb_run_batch_sensor_fixed_call(varargin)
            
            if isempty(S.sensor_position)
                uiwait(msgbox({'empty sensor position: load sensor postion'},...
                    'warning','modal'));
                return;
            end
            
            if isempty(S.tx_signal)
                uiwait(msgbox({'empty tx signal: generate tx signal'},...
                    'warning','modal'));
                return;
            end
            
            % disable all uimenu
            set(S.fm,{'enable'},repmat({'off'},length(S.fm),1));
            
            [trial_length, radius_ratio, target_pos_step, snr_db] = ...
                gui_batch_sensor_fixed_input_from_uicontrol(S);
            
            delta_x = target_pos_step;
            delta_y = target_pos_step;
            
            S.target_radius_meter = S.uca_radius_meter * radius_ratio;
            target_position_limit = S.uca_radius_meter * 3;
            
            x_range = [-1, 1] * S.target_radius_meter;
            y_range = [-1, 1] * S.target_radius_meter;
            
            x = x_range(1) : delta_x : x_range(end);
            x_length = length(x);
            y = y_range(1) : delta_y : y_range(end);
            y_length = length(y);
            
            % used to determine whether target is overlapped with sensor
            overlap_criterion_meter = 1;
            
            error_torrieri = nan(x_length, y_length);
            cep_mean = nan(x_length, y_length);
            gdop_mean = nan(x_length, y_length);
            
            plot_signal = 0; plot_position = 0; use_only_torrieri_method = 1;
            
            h = waitbar(0, 'Please wait...', 'name', 'batch program progress', 'windowstyle', 'modal');
            steps = x_length * y_length;
            
            u = tic;
            
            for i = 1 : x_length
                for j = 1 : y_length
                    
                    position_error_torrieri = zeros(1, trial_length);
                    % ###### for computing position estimation covariance
                    x_est_torrieri = zeros(2, trial_length);
                    cep = zeros(1, trial_length);
                    gdop = zeros(1, trial_length);
                    
                    target_position = [x(i), y(j)];
                    
                    if ~check_target_position_is_good(target_position, S.target_radius_meter)
                        fprintf(2, '###### target position is out of range\n');
                        return;
                    end
                    
                    if check_target_overlap_sensor(S.sensor_position, target_position, overlap_criterion_meter)
                        % target overlap sensor, so skip
                        continue;
                    end
                    
                    for k = 1 : trial_length
                        [position_error_torrieri(k), x_est_torrieri(:, k), cep(k), gdop(k), ...
                            lambda1, lambda2, theta_rad] = ...
                            sub_simulate_tdoa_sensor_fixed(S.sensor_position, snr_db, target_position, ...
                            plot_signal, plot_position, use_only_torrieri_method, S.target_radius_meter, S.rician_param, ...
                            S.tx_signal, S.fs, S.nfft, S.bw_mhz);
                    end
                    
                    idx = position_error_torrieri <= target_position_limit;
                    position_error_excl = position_error_torrieri(idx);
                    
                    mean_torrieri = mean(position_error_excl);
                    std_torrieri = std(position_error_excl);
                    
                    error_torrieri(i, j) = mean_torrieri;
                    cep_mean(i, j) = mean(cep(idx));
                    gdop_mean(i, j) = mean(gdop(idx));
                    
                    step = y_length * (i - 1) + j;
                    w = toc(u);
                    % reference:
                    % http://stackoverflow.com/questions/12210583/is-there-a-matlab-function-to-convert-elapsed-seconds-to-hhmmss-format
                    z = fix(mod(w, [0, 3600, 60])./[3600, 60, 1]);
                    waitbar(step / steps, h, sprintf('%.2f %%, elapsed time = %d : %02d : %02d', ...
                        step / steps * 100, z(1), z(2), z(3)));
                    
                end
            end
            
            close(h);
            
            % for saving result
            filename = 'tdoa_result_sensor_fixed.mat';
            % #### append date string to filename
            [p, name, e] = fileparts(filename);
            filename = [name, '_', datestr(now, 'yymmddHHMM'), e];
            sensor_position = S.sensor_position;
            target_radius_meter = S.target_radius_meter;
            target_signal_spec = [S.ndlrb, S.nprsrb, S.subframe_length];
            save(filename, 'sensor_position', 'snr_db', 'trial_length', 'x', 'y', 'target_radius_meter', ...
                'delta_x', 'delta_y', 'error_torrieri', 'cep_mean', 'gdop_mean', 'target_signal_spec', ...
                'target_position_limit');
            
            msgbox_str = sprintf('%s was created', filename);
            uiwait(msgbox({msgbox_str},'info','modal'));
            
            % enable all uimenu
            set(S.fm,{'enable'},repmat({'on'},length(S.fm),1));
            
        end
        
        function [] = pb_run_sensor_fixed_call(varargin)
            
            % ### tried to make this code function(gui_get_sensor_position_dialog_box.m),
            % ### but when go to "catch" section, sensor_position is still empty
            % ### this cause error
            if isempty(S.sensor_position)
                uiwait(msgbox({'empty sensor position: load sensor postion'},...
                    'warning','modal'));
                return;
            end
            
            if isempty(S.tx_signal)
                uiwait(msgbox({'empty tx signal: generate tx signal'},...
                    'warning','modal'));
                return;
            end
            
            % disable all uimenu
            set(S.fm,{'enable'},repmat({'off'},length(S.fm),1));
            
%             set(S.fh(2), 'windowstyle', 'modal');
            
            [trial_length, radius_ratio, target_pos_y, target_pos_x, snr_db] = ...
                gui_sensor_fixed_input_from_uicontrol(S);
            
            plot_signal = 0; plot_position = 0; use_only_torrieri_method = 1;
            
            target_position = [target_pos_x, target_pos_y];
            
            S.target_radius_meter = S.uca_radius_meter * radius_ratio;
            
            position_error_torrieri = zeros(1, trial_length);
            cep = zeros(1, trial_length);
            gdop = zeros(1, trial_length);
            lambda1 = zeros(1, trial_length);
            lambda2 = zeros(1, trial_length);
            theta_rad = zeros(1, trial_length);
            % ###### for computing position estimation covariance
            x_est_torrieri = zeros(2, trial_length);
            
            for n = 1 : trial_length
                [position_error_torrieri(n), x_est_torrieri(:, n), cep(n), gdop(n), ...
                    lambda1(n), lambda2(n), theta_rad(n)] = ...
                    sub_simulate_tdoa_sensor_fixed(S.sensor_position, snr_db, target_position, ...
                    plot_signal, plot_position, use_only_torrieri_method, S.target_radius_meter, S.rician_param, ...
                    S.tx_signal, S.fs, S.nfft, S.bw_mhz);
            end
            
            % ###### target location beyond target_position_limit is ignored:
            % ###### excluded in histogram
            % ###### excluded in computing mean position error
            
            % #############################################################################################
            % ###### current target_position_limit may be too small
            % ###### target_position_limit = uca_radius_meter * 3 is good?
            % ###### target_position_limit also exist in batch_simulate_tdoa_bw_corr_snr.m
            % #############################################################################################
            target_position_limit = S.target_radius_meter;
            idx = position_error_torrieri <= target_position_limit;
            position_error_excl = position_error_torrieri(idx);
            
            mean_position_error = mean(position_error_excl);
            
            if isempty(S.rician_param)
                title_text = sprintf('[location] snr = %d db, trial = %d, location error = %d m, excl = %d', ...
                    snr_db, trial_length, round(mean_position_error), trial_length - sum(idx));
            else
                title_text = sprintf('[location, rician] snr = %d db, trial = %d, location error = %d m, excl = %d', ...
                    snr_db, trial_length, round(mean_position_error), trial_length - sum(idx));
            end
            plot_sensor_position_only(S.sensor_position, S.target_radius_meter, title_text, ...
                S.fading_param_filename);
            hold on;
            plot_target_position_and_ellipse(target_position, x_est_torrieri, ...
                cep, gdop, lambda1, lambda2, theta_rad);
            
            histogram_bin_length = 100;
            plot_position_error_histogram(position_error_excl, histogram_bin_length, title_text, ...
                S.fading_param_filename);
            
%             set(S.fh(2), 'windowstyle', 'normal');
            
            % enable all uimenu
            set(S.fm,{'enable'},repmat({'on'},length(S.fm),1));
            
        end
        
        function [] = fh_sub_crfcn(varargin)
            % Closerequestfcn for figures.
            delete(S.fh(2)) % Delete all figures stored in structure.
            
            % #############################
            % ### MUST USE THIS
            % #############################
            S.fh(2) = [];
        end
        
    end

    function [] = fh_main_crfcn(varargin)
        % Closerequestfcn for figures.
        delete(S.fh) % Delete all figures stored in structure.
    end

%     function [] = fh_sub_crfcn(varargin)
%         % Closerequestfcn for figures.
%         delete(S.fh(2)) % Delete all figures stored in structure.
%
%         % #############################
%         % ### MUST USE THIS
%         % #############################
%         S.fh(2) = [];
%     end

end
